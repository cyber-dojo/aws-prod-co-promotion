name: Main

on:
  workflow_call:
    inputs:
      KOSLI_TRAIL:
        required: true
        type: string
    secrets:
      KOSLI_API_TOKEN:
        required: true

env:
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_AWS_BETA:  ${{ vars.KOSLI_AWS_BETA }}          # aws-beta
  KOSLI_AWS_PROD:  ${{ vars.KOSLI_AWS_PROD }}          # aws-prod
  KOSLI_DEBUG:     ${{ vars.KOSLI_DEBUG }}             # true/false
  KOSLI_DRY_RUN:   ${{ vars.KOSLI_DRY_RUN }}           # true/false
  KOSLI_HOST:      ${{ vars.KOSLI_HOST }}              # https://app.kosli.com
  KOSLI_ORG:       ${{ vars.KOSLI_ORG }}               # cyber-dojo
  KOSLI_FLOW:      ${{ vars.KOSLI_FLOW }}              # production-co-promotion
  KOSLI_TRAIL:     ${{ inputs.KOSLI_TRAIL }}

  AWS_ECR_ID:          ${{ vars.AWS_ECR_ID }}
  AWS_REGION:          ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID_PROD: ${{ vars.AWS_ACCOUNT_ID_PROD }}

jobs:
  setup:
    needs: []
    runs-on: ubuntu-latest
    outputs:
      aws_account_id_prod:      ${{ steps.vars.outputs.aws_account_id_prod }}
      ecr_registry:             ${{ steps.vars.outputs.ecr_registry }}
      aws_region:               ${{ steps.vars.outputs.aws_region }}
      gh_actions_iam_role_name: ${{ steps.vars.outputs.gh_actions_iam_role_name }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare outputs for workflow jobs
        id: vars
        run: |
          ECR_REGISTRY="${AWS_ECR_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          echo "aws_account_id_prod=${AWS_ACCOUNT_ID_PROD}"   >> ${GITHUB_OUTPUT}                    
          echo "ecr_registry=${ECR_REGISTRY}"                 >> ${GITHUB_OUTPUT}
          echo "aws_region=${AWS_REGION}"                     >> ${GITHUB_OUTPUT}
          echo "gh_actions_iam_role_name=gh_actions_services" >> ${GITHUB_OUTPUT}

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Tag Kosli Flow
        run:
          kosli tag flow "${{ env.KOSLI_FLOW }}"
            --set repo_url=https://github.com/cyber-dojo/aws-prod-co-promotion
            --set ci=github

      - name: Begin Kosli Trail
        run:
          kosli begin trail "${KOSLI_TRAIL}"


  find-artifacts:
    needs: []
    runs-on: ubuntu-latest
    outputs:
      promotions: "${{ steps.vars.outputs.promotions }}"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Generate JSON for each Artifact promotion for use in the following job's strategy:matrix:include
        id: vars
        run:
          echo "promotions=$(make promotions | jq --raw-output --compact-output .)" >> ${GITHUB_OUTPUT}


  # These kosli-attest-artifacts are currently necessary. It is likely they won't be at some future time.
  kosli-attest-artifacts:
    if: ${{ needs.find-artifacts.outputs.promotions != '[]' }}
    needs: [find-artifacts]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.find-artifacts.outputs.promotions) }}
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Attest Artifact to Kosli
        run:
          kosli attest artifact "${{ matrix.incoming_image_name }}"
            --fingerprint="${{ matrix.incoming_fingerprint }}"
            --name="${{ matrix.incoming_repo_name }}"


  sdlc-control-gate:
    if: ${{ needs.find-artifacts.outputs.promotions != '[]' }}
    needs: [find-artifacts, kosli-attest-artifacts]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.find-artifacts.outputs.promotions) }}
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Assert Artifact is compliant for aws-prod
        run:
          kosli assert artifact
            --fingerprint="${{ matrix.incoming_fingerprint }}"
            --environment="${KOSLI_AWS_PROD}"


  approve:
    if: ${{ needs.find-artifacts.outputs.promotions != '[]' }}
    needs: [find-artifacts, sdlc-control-gate]
    runs-on: ubuntu-latest
    environment:
      name: production
      url:  https://cyber-dojo.org
    strategy:
      matrix:
        include: ${{ fromJSON(needs.find-artifacts.outputs.promotions) }}
    steps:
      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Report approval to Kosli
        run:
          kosli report approval
            --fingerprint="${{ matrix.incoming_fingerprint }}"          
            --approver="${{ github.actor }}"
            --environment="${KOSLI_AWS_PROD}"


  deploy-to-prod:
    if: ${{ needs.find-artifacts.outputs.promotions != '[]' }}
    needs: [setup, find-artifacts, approve]
    strategy:
      matrix:
        include: ${{ fromJSON(needs.find-artifacts.outputs.promotions) }}
    permissions:
      id-token: write
      contents: write
    uses: fivexl/gh-workflow-tf-plan-apply/.github/workflows/base.yml@v0.0.23
    with:
      checkout_repository:    "cyber-dojo/${{ matrix.incoming_repo_name }}"
      checkout_commit_sha:    ${{ matrix.commit_sha }}
      checkout_fetch_depth:   0
      aws_region:             ${{ needs.setup.outputs.aws_region }}
      aws_role_arn:           arn:aws:iam::${{ needs.setup.outputs.aws_account_id_prod }}:role/${{ needs.setup.outputs.gh_actions_iam_role_name }}
      aws_default_region:     ${{ needs.setup.outputs.aws_region }}
      aws_role_duration:      900
      working_directory:      deployment/terraform/
      tf_apply:               true
      tf_version:             v1.9.1
      tf_additional_env_vars: '{"TF_VAR_TAGGED_IMAGE": "${{ matrix.incoming_image_name }}"}'

