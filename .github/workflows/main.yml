name: Main

on:
  push:

env:
  KOSLI_API_TOKEN: ${{ secrets.KOSLI_API_TOKEN }}
  KOSLI_AWS_BETA:  ${{ vars.KOSLI_AWS_BETA }}          # aws-beta
  KOSLI_AWS_PROD:  ${{ vars.KOSLI_AWS_PROD }}          # aws-prod
  KOSLI_DEBUG:     ${{ vars.KOSLI_DEBUG }}             # true/false
  KOSLI_DRY_RUN:   true # ${{ vars.KOSLI_DRY_RUN }}           # false
  KOSLI_HOST:      ${{ vars.KOSLI_HOST }}              # https://app.kosli.com
  KOSLI_ORG:       ${{ vars.KOSLI_ORG }}               # cyber-dojo
  KOSLI_FLOW:      ${{ vars.KOSLI_FLOW }}
  KOSLI_TRAIL:     ${{ github.sha }}

  AWS_ECR_ID:          ${{ vars.AWS_ECR_ID }}
  AWS_REGION:          ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID_BETA: ${{ vars.AWS_ACCOUNT_ID_BETA }}
  AWS_ACCOUNT_ID_PROD: ${{ vars.AWS_ACCOUNT_ID_PROD }}

jobs:
  setup:
    runs-on: ubuntu-latest
    needs: []
    outputs:
      aws_account_id_beta:      ${{ steps.vars.outputs.aws_account_id_beta }}
      aws_account_id_prod:      ${{ steps.vars.outputs.aws_account_id_prod }}
      ecr_registry:             ${{ steps.vars.outputs.ecr_registry }}
      aws_region:               ${{ steps.vars.outputs.aws_region }}
      gh_actions_iam_role_name: ${{ steps.vars.outputs.gh_actions_iam_role_name }}
      service:                  dashboard
      image_name:               244531986313.dkr.ecr.eu-central-1.amazonaws.com/dashboard:5f1340b@sha256:43f9c5207ad814c6b71fcdc6d8420d7f8ebcdd0ee470aff398e1eb35ab5766e6
      fingerprint:              43f9c5207ad814c6b71fcdc6d8420d7f8ebcdd0ee470aff398e1eb35ab5766e6

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Prepare outputs for workflow jobs
        id: vars
        run: |
          ECR_REGISTRY="${AWS_ECR_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"          
          IMAGE_TAG="${GITHUB_SHA:0:7}"                  
          IMAGE_NAME="${ECR_REGISTRY}/${{ env.SERVICE_NAME }}:${IMAGE_TAG}"
          
          echo "aws_account_id_beta=${AWS_ACCOUNT_ID_BETA}"   >> ${GITHUB_OUTPUT}          
          echo "aws_account_id_prod=${AWS_ACCOUNT_ID_PROD}"   >> ${GITHUB_OUTPUT}                    
          echo "ecr_registry=${ECR_REGISTRY}"                 >> ${GITHUB_OUTPUT}
          echo "aws_region=${AWS_REGION}"                     >> ${GITHUB_OUTPUT}
          echo "gh_actions_iam_role_name=gh_actions_services" >> ${GITHUB_OUTPUT}

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest pull-request evidence to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        run:
          kosli begin trail "${KOSLI_TRAIL}"


  attest-promotion:
    needs: [setup]
    runs-on: ubuntu-latest
    env:
      KOSLI_FINGERPRINT: ${{ needs.setup.outputs.fingerprint }}
      SERVICE:           ${{ needs.setup.outputs.service }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest promotion to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        run:
          kosli attest artifact "${KOSLI_FINGERPRINT}" 
            --name="${SERVICE}"
            --dry-run=true
          

  sdlc-control-gate:
    needs: [setup, attest-promotion]
    runs-on: ubuntu-latest
    env:
      KOSLI_FINGERPRINT: ${{ needs.setup.outputs.fingerprint }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Kosli SDLC gate to short-circuit the workflow
        if: ${{ github.ref == 'refs/heads/main' }}
        run:
          kosli assert artifact "${KOSLI_FINGERPRINT}" 
            --environment="${KOSLI_AWS_PROD}


  approve-deployment:
    needs: [setup, sdlc-control-gate]
    runs-on: ubuntu-latest
    env:
      KOSLI_FINGERPRINT: ${{ needs.setup.outputs.fingerprint }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Kosli CLI
        uses: kosli-dev/setup-cli-action@v2
        with:
          version: ${{ vars.KOSLI_CLI_VERSION }}

      - name: Attest pull-request evidence to Kosli
        if: ${{ github.ref == 'refs/heads/main' }}
        run:
          kosli report approval "${KOSLI_FINGERPRINT}"
            --approver="${{ github.actor }}"
            --environment="${KOSLI_AWS_PROD}"


  promote:
    needs: [setup, approve-deployment]
    permissions:
      id-token: write
      contents: write
    uses: fivexl/gh-workflow-tf-plan-apply/.github/workflows/base.yml@v0.0.22
    with:
      checkout_repository:    "cyber-dojo/dashboard"
      aws_region:             ${{ needs.setup.outputs.aws_region }}
      aws_role_arn:           arn:aws:iam::${{ needs.setup.outputs.aws_account_id_prod }}:role/${{ needs.setup.outputs.gh_actions_iam_role_name }}
      aws_default_region:     ${{ needs.setup.outputs.aws_region }}
      aws_role_duration:      900
      working_directory:      deployment/terraform/
      tf_apply:               true
      tf_version:             v1.9.1
      tf_additional_env_vars: '{"TF_VAR_TAGGED_IMAGE": "${{ needs.setup.outputs.image_name }}"}'



#  JOB showing matrix: parallelization
#  deploy-static:
#    needs: [build, assert-artifact]
#    if: ${{ github.ref == 'refs/heads/master' }}
#    uses: kosli-dev/server/.github/workflows/upload-static-template.yml@master
#    strategy:
#      fail-fast: false
#      matrix:
#        environment: [staging, azure-staging]
#        include:
#          - AWS_ACCOUNT_ID: 772819027869
#            environment: staging
#          - AWS_ACCOUNT_ID: 749993776354
#            environment: azure-staging
#    with:
#      AWS_ACCOUNT_ID: ${{ matrix.AWS_ACCOUNT_ID }}
#      AWS_REGION: eu-central-1
#      ARTIFACTS_BUCKET_NAME: ${{ vars.ARTIFACTS_BUCKET_NAME }}
#      TAG: ${{ needs.build.outputs.tag }}
